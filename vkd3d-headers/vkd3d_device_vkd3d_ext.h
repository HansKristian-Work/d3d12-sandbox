/*** Autogenerated by WIDL 8.0 from ../include/vkd3d_device_vkd3d_ext.idl - Do not edit ***/

#ifdef _WIN32
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif
#include <rpc.h>
#include <rpcndr.h>
#endif

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __vkd3d_device_vkd3d_ext_h__
#define __vkd3d_device_vkd3d_ext_h__

#ifndef __WIDL_INLINE
#if defined(__cplusplus) || defined(_MSC_VER)
#define __WIDL_INLINE inline
#elif defined(__GNUC__)
#define __WIDL_INLINE __inline__
#endif
#endif

/* Forward declarations */

#ifndef __ID3D12DeviceExt_FWD_DEFINED__
#define __ID3D12DeviceExt_FWD_DEFINED__
typedef interface ID3D12DeviceExt ID3D12DeviceExt;
#ifdef __cplusplus
interface ID3D12DeviceExt;
#endif /* __cplusplus */
#endif

#ifndef __ID3D12DXVKInteropDevice_FWD_DEFINED__
#define __ID3D12DXVKInteropDevice_FWD_DEFINED__
typedef interface ID3D12DXVKInteropDevice ID3D12DXVKInteropDevice;
#ifdef __cplusplus
interface ID3D12DXVKInteropDevice;
#endif /* __cplusplus */
#endif

#ifndef __ID3DLowLatencyDevice_FWD_DEFINED__
#define __ID3DLowLatencyDevice_FWD_DEFINED__
typedef interface ID3DLowLatencyDevice ID3DLowLatencyDevice;
#ifdef __cplusplus
interface ID3DLowLatencyDevice;
#endif /* __cplusplus */
#endif

/* Headers for imported files */

#include <vkd3d_d3d12.h>
#include <vkd3d_vk_includes.h>

#ifdef __cplusplus
extern "C" {
#endif

/*****************************************************************************
 * ID3D12DeviceExt interface
 */
#ifndef __ID3D12DeviceExt_INTERFACE_DEFINED__
#define __ID3D12DeviceExt_INTERFACE_DEFINED__

DEFINE_GUID(IID_ID3D12DeviceExt, 0x11ea7a1a, 0x0f6a, 0x49bf, 0xb6,0x12, 0x3e,0x30,0xf8,0xe2,0x01,0xdd);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("11ea7a1a-0f6a-49bf-b612-3e30f8e201dd")
ID3D12DeviceExt : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE GetVulkanHandles(
        VkInstance *vk_instance,
        VkPhysicalDevice *vk_physical_device,
        VkDevice *vk_device) = 0;

    virtual BOOL STDMETHODCALLTYPE GetExtensionSupport(
        D3D12_VK_EXTENSION extension) = 0;

    virtual HRESULT STDMETHODCALLTYPE CreateCubinComputeShaderWithName(
        const void *cubin_data,
        UINT32 cubin_size,
        UINT32 block_x,
        UINT32 block_y,
        UINT32 block_z,
        const char *shader_name,
        D3D12_CUBIN_DATA_HANDLE **handle) = 0;

    virtual HRESULT STDMETHODCALLTYPE DestroyCubinComputeShader(
        D3D12_CUBIN_DATA_HANDLE *handle) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetCudaTextureObject(
        D3D12_CPU_DESCRIPTOR_HANDLE srv_handle,
        D3D12_CPU_DESCRIPTOR_HANDLE sampler_handle,
        UINT32 *cuda_texture_handle) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetCudaSurfaceObject(
        D3D12_CPU_DESCRIPTOR_HANDLE uav_handle,
        UINT32 *cuda_surface_handle) = 0;

    virtual HRESULT STDMETHODCALLTYPE CaptureUAVInfo(
        D3D12_UAV_INFO *uav_info) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ID3D12DeviceExt, 0x11ea7a1a, 0x0f6a, 0x49bf, 0xb6,0x12, 0x3e,0x30,0xf8,0xe2,0x01,0xdd)
#endif
#else
typedef struct ID3D12DeviceExtVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ID3D12DeviceExt *This,
        REFIID riid,
        void **object);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ID3D12DeviceExt *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ID3D12DeviceExt *This);

    /*** ID3D12DeviceExt methods ***/
    HRESULT (STDMETHODCALLTYPE *GetVulkanHandles)(
        ID3D12DeviceExt *This,
        VkInstance *vk_instance,
        VkPhysicalDevice *vk_physical_device,
        VkDevice *vk_device);

    BOOL (STDMETHODCALLTYPE *GetExtensionSupport)(
        ID3D12DeviceExt *This,
        D3D12_VK_EXTENSION extension);

    HRESULT (STDMETHODCALLTYPE *CreateCubinComputeShaderWithName)(
        ID3D12DeviceExt *This,
        const void *cubin_data,
        UINT32 cubin_size,
        UINT32 block_x,
        UINT32 block_y,
        UINT32 block_z,
        const char *shader_name,
        D3D12_CUBIN_DATA_HANDLE **handle);

    HRESULT (STDMETHODCALLTYPE *DestroyCubinComputeShader)(
        ID3D12DeviceExt *This,
        D3D12_CUBIN_DATA_HANDLE *handle);

    HRESULT (STDMETHODCALLTYPE *GetCudaTextureObject)(
        ID3D12DeviceExt *This,
        D3D12_CPU_DESCRIPTOR_HANDLE srv_handle,
        D3D12_CPU_DESCRIPTOR_HANDLE sampler_handle,
        UINT32 *cuda_texture_handle);

    HRESULT (STDMETHODCALLTYPE *GetCudaSurfaceObject)(
        ID3D12DeviceExt *This,
        D3D12_CPU_DESCRIPTOR_HANDLE uav_handle,
        UINT32 *cuda_surface_handle);

    HRESULT (STDMETHODCALLTYPE *CaptureUAVInfo)(
        ID3D12DeviceExt *This,
        D3D12_UAV_INFO *uav_info);

    END_INTERFACE
} ID3D12DeviceExtVtbl;

interface ID3D12DeviceExt {
    CONST_VTBL ID3D12DeviceExtVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ID3D12DeviceExt_QueryInterface(This,riid,object) (This)->lpVtbl->QueryInterface(This,riid,object)
#define ID3D12DeviceExt_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ID3D12DeviceExt_Release(This) (This)->lpVtbl->Release(This)
/*** ID3D12DeviceExt methods ***/
#define ID3D12DeviceExt_GetVulkanHandles(This,vk_instance,vk_physical_device,vk_device) (This)->lpVtbl->GetVulkanHandles(This,vk_instance,vk_physical_device,vk_device)
#define ID3D12DeviceExt_GetExtensionSupport(This,extension) (This)->lpVtbl->GetExtensionSupport(This,extension)
#define ID3D12DeviceExt_CreateCubinComputeShaderWithName(This,cubin_data,cubin_size,block_x,block_y,block_z,shader_name,handle) (This)->lpVtbl->CreateCubinComputeShaderWithName(This,cubin_data,cubin_size,block_x,block_y,block_z,shader_name,handle)
#define ID3D12DeviceExt_DestroyCubinComputeShader(This,handle) (This)->lpVtbl->DestroyCubinComputeShader(This,handle)
#define ID3D12DeviceExt_GetCudaTextureObject(This,srv_handle,sampler_handle,cuda_texture_handle) (This)->lpVtbl->GetCudaTextureObject(This,srv_handle,sampler_handle,cuda_texture_handle)
#define ID3D12DeviceExt_GetCudaSurfaceObject(This,uav_handle,cuda_surface_handle) (This)->lpVtbl->GetCudaSurfaceObject(This,uav_handle,cuda_surface_handle)
#define ID3D12DeviceExt_CaptureUAVInfo(This,uav_info) (This)->lpVtbl->CaptureUAVInfo(This,uav_info)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT ID3D12DeviceExt_QueryInterface(ID3D12DeviceExt* This,REFIID riid,void **object) {
    return This->lpVtbl->QueryInterface(This,riid,object);
}
static __WIDL_INLINE ULONG ID3D12DeviceExt_AddRef(ID3D12DeviceExt* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG ID3D12DeviceExt_Release(ID3D12DeviceExt* This) {
    return This->lpVtbl->Release(This);
}
/*** ID3D12DeviceExt methods ***/
static __WIDL_INLINE HRESULT ID3D12DeviceExt_GetVulkanHandles(ID3D12DeviceExt* This,VkInstance *vk_instance,VkPhysicalDevice *vk_physical_device,VkDevice *vk_device) {
    return This->lpVtbl->GetVulkanHandles(This,vk_instance,vk_physical_device,vk_device);
}
static __WIDL_INLINE BOOL ID3D12DeviceExt_GetExtensionSupport(ID3D12DeviceExt* This,D3D12_VK_EXTENSION extension) {
    return This->lpVtbl->GetExtensionSupport(This,extension);
}
static __WIDL_INLINE HRESULT ID3D12DeviceExt_CreateCubinComputeShaderWithName(ID3D12DeviceExt* This,const void *cubin_data,UINT32 cubin_size,UINT32 block_x,UINT32 block_y,UINT32 block_z,const char *shader_name,D3D12_CUBIN_DATA_HANDLE **handle) {
    return This->lpVtbl->CreateCubinComputeShaderWithName(This,cubin_data,cubin_size,block_x,block_y,block_z,shader_name,handle);
}
static __WIDL_INLINE HRESULT ID3D12DeviceExt_DestroyCubinComputeShader(ID3D12DeviceExt* This,D3D12_CUBIN_DATA_HANDLE *handle) {
    return This->lpVtbl->DestroyCubinComputeShader(This,handle);
}
static __WIDL_INLINE HRESULT ID3D12DeviceExt_GetCudaTextureObject(ID3D12DeviceExt* This,D3D12_CPU_DESCRIPTOR_HANDLE srv_handle,D3D12_CPU_DESCRIPTOR_HANDLE sampler_handle,UINT32 *cuda_texture_handle) {
    return This->lpVtbl->GetCudaTextureObject(This,srv_handle,sampler_handle,cuda_texture_handle);
}
static __WIDL_INLINE HRESULT ID3D12DeviceExt_GetCudaSurfaceObject(ID3D12DeviceExt* This,D3D12_CPU_DESCRIPTOR_HANDLE uav_handle,UINT32 *cuda_surface_handle) {
    return This->lpVtbl->GetCudaSurfaceObject(This,uav_handle,cuda_surface_handle);
}
static __WIDL_INLINE HRESULT ID3D12DeviceExt_CaptureUAVInfo(ID3D12DeviceExt* This,D3D12_UAV_INFO *uav_info) {
    return This->lpVtbl->CaptureUAVInfo(This,uav_info);
}
#endif
#endif

#endif


#endif  /* __ID3D12DeviceExt_INTERFACE_DEFINED__ */

/*****************************************************************************
 * ID3D12DXVKInteropDevice interface
 */
#ifndef __ID3D12DXVKInteropDevice_INTERFACE_DEFINED__
#define __ID3D12DXVKInteropDevice_INTERFACE_DEFINED__

DEFINE_GUID(IID_ID3D12DXVKInteropDevice, 0x39da4e09, 0xbd1c, 0x4198, 0x9f,0xae, 0x86,0xbb,0xe3,0xbe,0x41,0xfd);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("39da4e09-bd1c-4198-9fae-86bbe3be41fd")
ID3D12DXVKInteropDevice : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE GetDXGIAdapter(
        REFIID iid,
        void **object) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetInstanceExtensions(
        UINT *extension_count,
        const char **extensions) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetDeviceExtensions(
        UINT *extension_count,
        const char **extensions) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetDeviceFeatures(
        const VkPhysicalDeviceFeatures2 **features) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetVulkanHandles(
        VkInstance *vk_instance,
        VkPhysicalDevice *vk_physical_device,
        VkDevice *vk_device) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetVulkanQueueInfo(
        ID3D12CommandQueue *queue,
        VkQueue *vk_queue,
        UINT32 *vk_queue_family) = 0;

    virtual void STDMETHODCALLTYPE GetVulkanImageLayout(
        ID3D12Resource *resource,
        D3D12_RESOURCE_STATES state,
        VkImageLayout *vk_layout) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetVulkanResourceInfo(
        ID3D12Resource *resource,
        UINT64 *vk_handle,
        UINT64 *buffer_offset) = 0;

    virtual HRESULT STDMETHODCALLTYPE LockCommandQueue(
        ID3D12CommandQueue *queue) = 0;

    virtual HRESULT STDMETHODCALLTYPE UnlockCommandQueue(
        ID3D12CommandQueue *queue) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ID3D12DXVKInteropDevice, 0x39da4e09, 0xbd1c, 0x4198, 0x9f,0xae, 0x86,0xbb,0xe3,0xbe,0x41,0xfd)
#endif
#else
typedef struct ID3D12DXVKInteropDeviceVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ID3D12DXVKInteropDevice *This,
        REFIID riid,
        void **object);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ID3D12DXVKInteropDevice *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ID3D12DXVKInteropDevice *This);

    /*** ID3D12DXVKInteropDevice methods ***/
    HRESULT (STDMETHODCALLTYPE *GetDXGIAdapter)(
        ID3D12DXVKInteropDevice *This,
        REFIID iid,
        void **object);

    HRESULT (STDMETHODCALLTYPE *GetInstanceExtensions)(
        ID3D12DXVKInteropDevice *This,
        UINT *extension_count,
        const char **extensions);

    HRESULT (STDMETHODCALLTYPE *GetDeviceExtensions)(
        ID3D12DXVKInteropDevice *This,
        UINT *extension_count,
        const char **extensions);

    HRESULT (STDMETHODCALLTYPE *GetDeviceFeatures)(
        ID3D12DXVKInteropDevice *This,
        const VkPhysicalDeviceFeatures2 **features);

    HRESULT (STDMETHODCALLTYPE *GetVulkanHandles)(
        ID3D12DXVKInteropDevice *This,
        VkInstance *vk_instance,
        VkPhysicalDevice *vk_physical_device,
        VkDevice *vk_device);

    HRESULT (STDMETHODCALLTYPE *GetVulkanQueueInfo)(
        ID3D12DXVKInteropDevice *This,
        ID3D12CommandQueue *queue,
        VkQueue *vk_queue,
        UINT32 *vk_queue_family);

    void (STDMETHODCALLTYPE *GetVulkanImageLayout)(
        ID3D12DXVKInteropDevice *This,
        ID3D12Resource *resource,
        D3D12_RESOURCE_STATES state,
        VkImageLayout *vk_layout);

    HRESULT (STDMETHODCALLTYPE *GetVulkanResourceInfo)(
        ID3D12DXVKInteropDevice *This,
        ID3D12Resource *resource,
        UINT64 *vk_handle,
        UINT64 *buffer_offset);

    HRESULT (STDMETHODCALLTYPE *LockCommandQueue)(
        ID3D12DXVKInteropDevice *This,
        ID3D12CommandQueue *queue);

    HRESULT (STDMETHODCALLTYPE *UnlockCommandQueue)(
        ID3D12DXVKInteropDevice *This,
        ID3D12CommandQueue *queue);

    END_INTERFACE
} ID3D12DXVKInteropDeviceVtbl;

interface ID3D12DXVKInteropDevice {
    CONST_VTBL ID3D12DXVKInteropDeviceVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ID3D12DXVKInteropDevice_QueryInterface(This,riid,object) (This)->lpVtbl->QueryInterface(This,riid,object)
#define ID3D12DXVKInteropDevice_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ID3D12DXVKInteropDevice_Release(This) (This)->lpVtbl->Release(This)
/*** ID3D12DXVKInteropDevice methods ***/
#define ID3D12DXVKInteropDevice_GetDXGIAdapter(This,iid,object) (This)->lpVtbl->GetDXGIAdapter(This,iid,object)
#define ID3D12DXVKInteropDevice_GetInstanceExtensions(This,extension_count,extensions) (This)->lpVtbl->GetInstanceExtensions(This,extension_count,extensions)
#define ID3D12DXVKInteropDevice_GetDeviceExtensions(This,extension_count,extensions) (This)->lpVtbl->GetDeviceExtensions(This,extension_count,extensions)
#define ID3D12DXVKInteropDevice_GetDeviceFeatures(This,features) (This)->lpVtbl->GetDeviceFeatures(This,features)
#define ID3D12DXVKInteropDevice_GetVulkanHandles(This,vk_instance,vk_physical_device,vk_device) (This)->lpVtbl->GetVulkanHandles(This,vk_instance,vk_physical_device,vk_device)
#define ID3D12DXVKInteropDevice_GetVulkanQueueInfo(This,queue,vk_queue,vk_queue_family) (This)->lpVtbl->GetVulkanQueueInfo(This,queue,vk_queue,vk_queue_family)
#define ID3D12DXVKInteropDevice_GetVulkanImageLayout(This,resource,state,vk_layout) (This)->lpVtbl->GetVulkanImageLayout(This,resource,state,vk_layout)
#define ID3D12DXVKInteropDevice_GetVulkanResourceInfo(This,resource,vk_handle,buffer_offset) (This)->lpVtbl->GetVulkanResourceInfo(This,resource,vk_handle,buffer_offset)
#define ID3D12DXVKInteropDevice_LockCommandQueue(This,queue) (This)->lpVtbl->LockCommandQueue(This,queue)
#define ID3D12DXVKInteropDevice_UnlockCommandQueue(This,queue) (This)->lpVtbl->UnlockCommandQueue(This,queue)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT ID3D12DXVKInteropDevice_QueryInterface(ID3D12DXVKInteropDevice* This,REFIID riid,void **object) {
    return This->lpVtbl->QueryInterface(This,riid,object);
}
static __WIDL_INLINE ULONG ID3D12DXVKInteropDevice_AddRef(ID3D12DXVKInteropDevice* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG ID3D12DXVKInteropDevice_Release(ID3D12DXVKInteropDevice* This) {
    return This->lpVtbl->Release(This);
}
/*** ID3D12DXVKInteropDevice methods ***/
static __WIDL_INLINE HRESULT ID3D12DXVKInteropDevice_GetDXGIAdapter(ID3D12DXVKInteropDevice* This,REFIID iid,void **object) {
    return This->lpVtbl->GetDXGIAdapter(This,iid,object);
}
static __WIDL_INLINE HRESULT ID3D12DXVKInteropDevice_GetInstanceExtensions(ID3D12DXVKInteropDevice* This,UINT *extension_count,const char **extensions) {
    return This->lpVtbl->GetInstanceExtensions(This,extension_count,extensions);
}
static __WIDL_INLINE HRESULT ID3D12DXVKInteropDevice_GetDeviceExtensions(ID3D12DXVKInteropDevice* This,UINT *extension_count,const char **extensions) {
    return This->lpVtbl->GetDeviceExtensions(This,extension_count,extensions);
}
static __WIDL_INLINE HRESULT ID3D12DXVKInteropDevice_GetDeviceFeatures(ID3D12DXVKInteropDevice* This,const VkPhysicalDeviceFeatures2 **features) {
    return This->lpVtbl->GetDeviceFeatures(This,features);
}
static __WIDL_INLINE HRESULT ID3D12DXVKInteropDevice_GetVulkanHandles(ID3D12DXVKInteropDevice* This,VkInstance *vk_instance,VkPhysicalDevice *vk_physical_device,VkDevice *vk_device) {
    return This->lpVtbl->GetVulkanHandles(This,vk_instance,vk_physical_device,vk_device);
}
static __WIDL_INLINE HRESULT ID3D12DXVKInteropDevice_GetVulkanQueueInfo(ID3D12DXVKInteropDevice* This,ID3D12CommandQueue *queue,VkQueue *vk_queue,UINT32 *vk_queue_family) {
    return This->lpVtbl->GetVulkanQueueInfo(This,queue,vk_queue,vk_queue_family);
}
static __WIDL_INLINE void ID3D12DXVKInteropDevice_GetVulkanImageLayout(ID3D12DXVKInteropDevice* This,ID3D12Resource *resource,D3D12_RESOURCE_STATES state,VkImageLayout *vk_layout) {
    This->lpVtbl->GetVulkanImageLayout(This,resource,state,vk_layout);
}
static __WIDL_INLINE HRESULT ID3D12DXVKInteropDevice_GetVulkanResourceInfo(ID3D12DXVKInteropDevice* This,ID3D12Resource *resource,UINT64 *vk_handle,UINT64 *buffer_offset) {
    return This->lpVtbl->GetVulkanResourceInfo(This,resource,vk_handle,buffer_offset);
}
static __WIDL_INLINE HRESULT ID3D12DXVKInteropDevice_LockCommandQueue(ID3D12DXVKInteropDevice* This,ID3D12CommandQueue *queue) {
    return This->lpVtbl->LockCommandQueue(This,queue);
}
static __WIDL_INLINE HRESULT ID3D12DXVKInteropDevice_UnlockCommandQueue(ID3D12DXVKInteropDevice* This,ID3D12CommandQueue *queue) {
    return This->lpVtbl->UnlockCommandQueue(This,queue);
}
#endif
#endif

#endif


#endif  /* __ID3D12DXVKInteropDevice_INTERFACE_DEFINED__ */

/*****************************************************************************
 * ID3DLowLatencyDevice interface
 */
#ifndef __ID3DLowLatencyDevice_INTERFACE_DEFINED__
#define __ID3DLowLatencyDevice_INTERFACE_DEFINED__

DEFINE_GUID(IID_ID3DLowLatencyDevice, 0xf3112584, 0x41f9, 0x348d, 0xa5,0x9b, 0x00,0xb7,0xe1,0xd2,0x85,0xd6);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("f3112584-41f9-348d-a59b-00b7e1d285d6")
ID3DLowLatencyDevice : public IUnknown
{
    virtual BOOL STDMETHODCALLTYPE SupportsLowLatency(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE LatencySleep(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetLatencySleepMode(
        BOOL low_latency_mode,
        BOOL low_latency_boost,
        UINT32 minimum_interval_us) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetLatencyMarker(
        UINT64 frameID,
        UINT32 markerType) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetLatencyInfo(
        D3D12_LATENCY_RESULTS *latency_results) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ID3DLowLatencyDevice, 0xf3112584, 0x41f9, 0x348d, 0xa5,0x9b, 0x00,0xb7,0xe1,0xd2,0x85,0xd6)
#endif
#else
typedef struct ID3DLowLatencyDeviceVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ID3DLowLatencyDevice *This,
        REFIID riid,
        void **object);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ID3DLowLatencyDevice *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ID3DLowLatencyDevice *This);

    /*** ID3DLowLatencyDevice methods ***/
    BOOL (STDMETHODCALLTYPE *SupportsLowLatency)(
        ID3DLowLatencyDevice *This);

    HRESULT (STDMETHODCALLTYPE *LatencySleep)(
        ID3DLowLatencyDevice *This);

    HRESULT (STDMETHODCALLTYPE *SetLatencySleepMode)(
        ID3DLowLatencyDevice *This,
        BOOL low_latency_mode,
        BOOL low_latency_boost,
        UINT32 minimum_interval_us);

    HRESULT (STDMETHODCALLTYPE *SetLatencyMarker)(
        ID3DLowLatencyDevice *This,
        UINT64 frameID,
        UINT32 markerType);

    HRESULT (STDMETHODCALLTYPE *GetLatencyInfo)(
        ID3DLowLatencyDevice *This,
        D3D12_LATENCY_RESULTS *latency_results);

    END_INTERFACE
} ID3DLowLatencyDeviceVtbl;

interface ID3DLowLatencyDevice {
    CONST_VTBL ID3DLowLatencyDeviceVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ID3DLowLatencyDevice_QueryInterface(This,riid,object) (This)->lpVtbl->QueryInterface(This,riid,object)
#define ID3DLowLatencyDevice_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ID3DLowLatencyDevice_Release(This) (This)->lpVtbl->Release(This)
/*** ID3DLowLatencyDevice methods ***/
#define ID3DLowLatencyDevice_SupportsLowLatency(This) (This)->lpVtbl->SupportsLowLatency(This)
#define ID3DLowLatencyDevice_LatencySleep(This) (This)->lpVtbl->LatencySleep(This)
#define ID3DLowLatencyDevice_SetLatencySleepMode(This,low_latency_mode,low_latency_boost,minimum_interval_us) (This)->lpVtbl->SetLatencySleepMode(This,low_latency_mode,low_latency_boost,minimum_interval_us)
#define ID3DLowLatencyDevice_SetLatencyMarker(This,frameID,markerType) (This)->lpVtbl->SetLatencyMarker(This,frameID,markerType)
#define ID3DLowLatencyDevice_GetLatencyInfo(This,latency_results) (This)->lpVtbl->GetLatencyInfo(This,latency_results)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT ID3DLowLatencyDevice_QueryInterface(ID3DLowLatencyDevice* This,REFIID riid,void **object) {
    return This->lpVtbl->QueryInterface(This,riid,object);
}
static __WIDL_INLINE ULONG ID3DLowLatencyDevice_AddRef(ID3DLowLatencyDevice* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG ID3DLowLatencyDevice_Release(ID3DLowLatencyDevice* This) {
    return This->lpVtbl->Release(This);
}
/*** ID3DLowLatencyDevice methods ***/
static __WIDL_INLINE BOOL ID3DLowLatencyDevice_SupportsLowLatency(ID3DLowLatencyDevice* This) {
    return This->lpVtbl->SupportsLowLatency(This);
}
static __WIDL_INLINE HRESULT ID3DLowLatencyDevice_LatencySleep(ID3DLowLatencyDevice* This) {
    return This->lpVtbl->LatencySleep(This);
}
static __WIDL_INLINE HRESULT ID3DLowLatencyDevice_SetLatencySleepMode(ID3DLowLatencyDevice* This,BOOL low_latency_mode,BOOL low_latency_boost,UINT32 minimum_interval_us) {
    return This->lpVtbl->SetLatencySleepMode(This,low_latency_mode,low_latency_boost,minimum_interval_us);
}
static __WIDL_INLINE HRESULT ID3DLowLatencyDevice_SetLatencyMarker(ID3DLowLatencyDevice* This,UINT64 frameID,UINT32 markerType) {
    return This->lpVtbl->SetLatencyMarker(This,frameID,markerType);
}
static __WIDL_INLINE HRESULT ID3DLowLatencyDevice_GetLatencyInfo(ID3DLowLatencyDevice* This,D3D12_LATENCY_RESULTS *latency_results) {
    return This->lpVtbl->GetLatencyInfo(This,latency_results);
}
#endif
#endif

#endif


#endif  /* __ID3DLowLatencyDevice_INTERFACE_DEFINED__ */

/* Begin additional prototypes for all interfaces */


/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __vkd3d_device_vkd3d_ext_h__ */
